{"version":3,"sources":["ui/GameArea/elements.ts","ui/GameArea/GameArea.tsx","ui/GameArea/components/InputForm.tsx","ui/GameArea/components/GameStatus.tsx","store/StorageHelper.ts","store/HighScoreStore.ts","context/username.ts","store/LeaderBoardStore.ts","ui/LosingScreen/elements.ts","ui/LosingScreen/components/LeaderBoard.tsx","ui/LosingScreen/LosingScreen.tsx","App.tsx","util/encryption.ts","util/authenticateUser.ts","ui/LoginArea/elements.ts","ui/LoginArea/LoginArea.tsx","serviceWorker.js","styles/BodyStyle.tsx","styles/AppStyles.tsx","index.tsx"],"names":["Initials","styled","Input","Submit","Artist","GameArea","Fragment","this","props","description","children","Component","InputForm","onSubmit","handleSubmit","type","onChange","handleChange","value","ref","input","focus","GameStatus","status","StorageItem","data","key","LocalStorageWorker","localStorageSupported","window","item","localStorage","setItem","list","Array","i","length","getItem","push","removeItem","clear","HighScoreStore","score","username","partialKey","highScore","getHighScore","previousHighScore","get","parseInt","add","JSON","stringify","UsernameContext","createContext","undefined","LeaderBoardStore","currentUser","register","defaultStore","currentLeaderBoard","parse","isUserExistant","getUserIndex","getUsers","lb","index","console","log","forEach","v","YouLost","Score","HighScore","Position","LeaderBoardBox","ReplayButton","LeaderBoard","state","users","store","position","sorted","sort","Consumer","user","getPosition","formatLeaderBoard","map","a","b","LosingScreen","context","onClick","replay","contextType","App","songs","getRandomSong","len","randomSongIndex","Math","floor","random","picked","splice","currentSong","secondTry","lost","e","setState","target","preventDefault","name","toLowerCase","generateSongInitials","artist","split","charAt","join","toUpperCase","encode","btoa","authenticate","details","authenticated","password","MarginedInput","LoginForm","LoginArea","outlined","lengthLimit","match","handleUsernameOnChange","slice","handlePasswordOnChange","Provider","style","border","placeholder","color","Boolean","location","hostname","BodyStyle","styles","css","StyledApp","StyledHeader","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.214ce119.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Initials = styled('h1')`\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    background-color: rgba(255, 255, 255, 0.2)\r\n`\r\n\r\nexport const Input = styled('input')`\r\n    margin-left: 10px;\r\n    background-color: lightblue;\r\n    padding: 3px;\r\n    &:focus {\r\n        background-color: cyan;\r\n        border: none;\r\n    }\r\n`\r\n\r\nexport const Submit = styled('input')`\r\n    border: none;\r\n    border-radius: 5px;\r\n    padding: 5px;\r\n    background-color: aliceblue;\r\n    color: black;\r\n    margin-left: 5px;\r\n`\r\n\r\nexport const Artist = styled('p')`\r\n    color: mediumpurple;\r\n    font-family: monospace;\r\n`\r\n","import React, { Component } from 'react';\nimport {Initials} from './elements'\n\nexport interface GameAreaProps {\n  description: string;\n}\n\nexport class GameArea extends Component<GameAreaProps> {\n  render() {\n    return (\n        <React.Fragment>\n            <Initials>{this.props.description}</Initials>\n            <hr />\n            {this.props.children}\n        </React.Fragment>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {Input, Submit} from '../elements'\n\nexport interface InputFormProps {\n    handleSubmit: React.FormEventHandler<HTMLFormElement>;\n    handleChange: React.ChangeEventHandler<HTMLInputElement>;\n    value: string;\n}\nexport interface InputFormState {\n    \n}\n\nexport class InputForm extends Component<InputFormProps, InputFormState> {\n    render() {\n        return (<div>\n            <form onSubmit={this.props.handleSubmit}>\n                <Input type={'text'} onChange={this.props.handleChange} value={this.props.value} ref={input => input && input.focus()} />\n                <Submit type={'submit'} />\n            </form>\n        </div>)\n    }\n};","import React, {FunctionComponent} from 'react'\r\n\r\nexport interface GameStatusProps {\r\n    status: string;\r\n}\r\n\r\nexport const GameStatus: FunctionComponent<GameStatusProps> = ({status}: GameStatusProps) => {\r\n    return (<p>\r\n        {status}\r\n    </p>)\r\n}","\r\nexport interface IStorageItem {\r\n    key: string;\r\n    value: any;\r\n}\r\n\r\nexport class StorageItem {\r\n    key: string;\r\n    value: any;\r\n\r\n    constructor(data: IStorageItem) {\r\n        this.key = data.key;\r\n        this.value = data.value;\r\n    }\r\n}\r\n\r\n// class for working with local storage in browser \r\nexport class LocalStorageWorker {\r\n    localStorageSupported: boolean;\r\n\r\n    constructor() {\r\n        // makes sure the browser supports local storage \r\n        this.localStorageSupported = typeof window['localStorage'] != \"undefined\" && window['localStorage'] != null;\r\n    }\r\n\r\n    // add value to storage\r\n    add(key: string, item: string) {\r\n        if (this.localStorageSupported) {\r\n            localStorage.setItem(key, item);\r\n        }\r\n    }\r\n\r\n    // get all values from storage (all items)\r\n    getAllItems(): Array<StorageItem> {\r\n        var list = new Array<StorageItem>();\r\n\r\n        for (var i = 0; i < localStorage.length; i++) {\r\n            var key = localStorage.key(i);\r\n            if (!key) continue;\r\n            var value = localStorage.getItem(key);\r\n\r\n            list.push(new StorageItem({\r\n                key: key,\r\n                value: value\r\n            }));\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n\r\n    // get one item by key from storage\r\n    get(key: string): string | null {\r\n        if (this.localStorageSupported) {\r\n            var item = localStorage.getItem(key);\r\n            return item;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // remove value from storage\r\n    remove(key: string) {\r\n        if (this.localStorageSupported) {\r\n            localStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    // clear storage (remove all items from it)\r\n    clear() {\r\n        if (this.localStorageSupported) {\r\n            localStorage.clear();\r\n        }\r\n    }\r\n}\r\n\r\n","import { LocalStorageWorker } from \"../store/StorageHelper\";\r\n\r\n// a class that extends the LocalStorageWorker and independantly manages the the storage of a user's high score which mimics the behaviour of database tables in SQL.\r\nexport class HighScoreStore extends LocalStorageWorker {\r\n  private readonly partialKey: string = \"highScore\";\r\n  private key: string;\r\n  constructor(private score: number, private username: string) {\r\n    super()\r\n    // creates the key using the username\r\n    this.key = `${this.partialKey}-${this.username}`;\r\n  }\r\n  private highScore: number | undefined;\r\n  // if the previous high score exists, turn it into an integer, else make it 0. \r\n  // Then, if the current high score is higher than the previous high score (which it will be if it didn't exist and became 0)\r\n  // replace the local storage key with the new value and return it\r\n  public readonly getHighScore = (): number | undefined => {\r\n    const previousHighScore = this.get(this.key);\r\n    if (previousHighScore) this.highScore = parseInt(previousHighScore);\r\n    else this.highScore = 0;\r\n\r\n    if (this.score > (this.highScore as number)) {\r\n      this.add(this.key, JSON.stringify(this.score));\r\n      this.highScore = this.score;\r\n    }\r\n\r\n    return this.highScore;\r\n  };\r\n}\r\n","import { createContext } from 'react';\r\n\r\n// this is a global variable that will be provided a value once the user has logged in\r\n\r\nexport const UsernameContext = createContext<string | undefined>(undefined);","import { LocalStorageWorker } from \"../store/StorageHelper\";\r\nimport { User } from \"../interfaces/user\";\r\n\r\n// the store for the array of users which is used for the leader board.\r\nexport class LeaderBoardStore extends LocalStorageWorker {\r\n  private readonly key: string = \"leaderBoard\";\r\n  constructor(private readonly currentUser: User) {\r\n    super()\r\n  }\r\n  // if the user is not already of the leader board, put them in\r\n  public readonly register = () => {\r\n    this.defaultStore();\r\n    const currentLeaderBoard: User[] = JSON.parse(\r\n      this.get(this.key) || \"[]\"\r\n    );\r\n    const isUserExistant = LeaderBoardStore.getUserIndex(\r\n      currentLeaderBoard,\r\n      this.currentUser\r\n    );\r\n    if (typeof isUserExistant === \"number\") {\r\n      const index = isUserExistant;\r\n      currentLeaderBoard[index] = this.currentUser;\r\n    } else currentLeaderBoard.push(this.currentUser);\r\n    return this.add(this.key, JSON.stringify(currentLeaderBoard));\r\n  };\r\n  // if the user already exists in the leaderboards, return the index where it exists; else return false;\r\n  private static getUserIndex(lb: User[], currentUser: User): number | boolean {\r\n    let index: boolean | number = false;\r\n    console.log(lb);\r\n    lb.forEach((v: User, i: number) => {\r\n      console.log(v.username, currentUser.username);\r\n      if (index) return;\r\n      if (v.username === currentUser.username) return (index = i);\r\n    });\r\n    return index;\r\n  }\r\n  // the value in the database is a string, so it is turned into an array by parsing it\r\n  public readonly getUsers = (): User[] =>\r\n    JSON.parse(this.get(this.key) as string);\r\n  private readonly defaultStore = () => {\r\n    if (!this.get(this.key)) this.add(this.key, JSON.stringify([]));\r\n  };\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const YouLost = styled('h1')`\r\n    color: red;\r\n    font-size: 100px;\r\n    font-family: Arial;\r\n`\r\n\r\nexport const Score = styled('p')`\r\n    color: lightslategrey;\r\n`\r\n\r\nexport const HighScore = styled('p')`\r\n    color: lightgrey;\r\n`\r\n\r\nexport const Position = styled('p')`\r\n    color: mediumpurple;\r\n`\r\n\r\nexport const LeaderBoardBox = styled('div')`\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n    border-radius: 10px;\r\n    padding: 5px;\r\n`\r\n\r\nexport const ReplayButton = styled('button')`\r\n    border: none;\r\n    padding: 10px;\r\n    width: 100px;\r\n    background-color: rebeccapurple;\r\n    color: white;\r\n    border-radius: 5px;\r\n    border: 2px solid white;\r\n`","import React, { Component, Fragment } from \"react\";\r\nimport { UsernameContext } from \"../../../context/username\";\r\nimport { LeaderBoardStore } from \"../../../store/LeaderBoardStore\";\r\nimport { User } from \"../../../interfaces/user\";\r\nimport { Position, LeaderBoardBox } from '../elements'\r\n\r\nexport interface LeaderBoardProps {\r\n  highScore: number;\r\n}\r\nexport interface LeaderBoardState {}\r\n\r\nexport class LeaderBoard extends Component<LeaderBoardProps, LeaderBoardState> {\r\n  public state: LeaderBoardState = {};\r\n  constructor(props: LeaderBoardProps) {\r\n    super(props);\r\n  }\r\n  private users: User[] | undefined;\r\n  private store: LeaderBoardStore | undefined;\r\n  private position: number | undefined;\r\n  private static readonly formatLeaderBoard: Function = (\r\n    lb: User[],\r\n    username: string | undefined\r\n  ): React.ReactNode[] => {\r\n    const lbInOrder = LeaderBoard.sort(lb);\r\n    return lbInOrder.map((v: User) => (\r\n      <li key={v.username}>\r\n        {v.username === username ? (\r\n          <Fragment>\r\n            <b>You</b>\r\n            {\" - \" + v.highScore}\r\n          </Fragment>\r\n        ) : (\r\n          `${v.username} - ${v.highScore}`\r\n        )}\r\n      </li>\r\n    ));\r\n  };\r\n  private static readonly sort: Function = (lb: User[]): User[] =>\r\n    lb.sort((a: User, b: User) => b.highScore - a.highScore);\r\n  private getPosition(username: string) {\r\n    const sorted = LeaderBoard.sort(this.users);\r\n    let position: number = 0;\r\n    sorted.forEach((v: User, i: number) => {\r\n      if (v.username === username) return (position = i);\r\n    });\r\n    return position + 1;\r\n  }\r\n  render() {\r\n    return (\r\n      <LeaderBoardBox>\r\n        <h3>Leaderboard</h3>\r\n        <UsernameContext.Consumer>\r\n          {(username: string | undefined) => {\r\n            const user: User = {\r\n              username: username as string,\r\n              highScore: this.props.highScore\r\n            };\r\n            this.store = new LeaderBoardStore(user);\r\n            this.store.register();\r\n            this.users = this.store.getUsers();\r\n            const position = this.getPosition(username as string);\r\n            return (\r\n              <Fragment>\r\n                <ol>{LeaderBoard.formatLeaderBoard(this.users, username)}</ol>\r\n                <Position>{position ? `Your position is ${position}` : null}</Position>\r\n              </Fragment>\r\n            );\r\n          }}\r\n        </UsernameContext.Consumer>\r\n      </LeaderBoardBox>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, ContextType, MouseEventHandler } from \"react\";\nimport { HighScoreStore } from \"../../store/HighScoreStore\";\nimport { LeaderBoard } from \"./components/LeaderBoard\";\nimport { UsernameContext } from \"../../context/username\";\nimport { YouLost, Score, HighScore, ReplayButton} from './elements'\n\nexport interface LosingScreenProps {\n  score: number;\n  replay: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport interface LosingScreenState {}\n\nexport class LosingScreen extends Component<\n  LosingScreenProps,\n  LosingScreenState\n> {\n  static contextType = UsernameContext;\n  context!: ContextType<typeof UsernameContext>;\n  private highScore: number | undefined;\n  private store: HighScoreStore | undefined;\n\n  componentWillMount() {\n    this.store = new HighScoreStore(this.props.score, this.context as string);\n    this.highScore = this.store.getHighScore();\n  }\n  render() {\n    return (\n      <div>\n        <ReplayButton onClick={this.props.replay}>Replay</ReplayButton>\n        <YouLost>You lost!</YouLost>\n        <Score>Your score: {this.props.score}</Score>\n        <HighScore>Your high score: {this.highScore}</HighScore>\n        <LeaderBoard highScore={this.highScore as number} />\n      </div>\n    );\n  }\n}\n","import React, { Component,Fragment, MouseEvent, MouseEventHandler } from \"react\";\nimport { GameArea } from \"./ui/GameArea/GameArea\";\nimport { InputForm } from \"./ui/GameArea/components/InputForm\";\nimport { songs } from \"./data/songs.json\";\nimport { song } from \"./interfaces/song\";\nimport { GameStatus } from \"./ui/GameArea/components/GameStatus\";\nimport { LosingScreen } from \"./ui/LosingScreen/LosingScreen\";\nimport { Artist } from './ui/GameArea/elements'\n\nexport interface AppState {\n  value: string; // the value of what is typed in the input box\n  currentSong: song; \n  status: string; // the text at the bottom which shows tells the player the game state\n  secondTry: boolean; // whether the user is on the second try or not\n  lost: boolean; //  whether the player has lost or not\n  score: number;\n}\n\nclass App extends Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n  }\n  // a local clone of the songs list to be mutated \n  private songs: song[] = [...songs];\n  // generates a random song using a random decimal number and then removes it from the songs variable\n  private getRandomSong = (): song => {\n    const len: number = this.songs.length;\n    const randomSongIndex = Math.floor(len * Math.random())\n    if (this.songs.length <= 0) this.songs = songs;\n    const picked = this.songs[randomSongIndex]\n    this.songs.splice(randomSongIndex, 1)\n    return picked;\n  };\n  // the default state the app begins in\n  public state: AppState = {\n    value: \"\",\n    currentSong: this.getRandomSong(),\n    secondTry: false,\n    status: \"\",\n    lost: false,\n    score: 0,\n\n  };\n  // this runs every time the user types something while focused on the input box, and sets the value of the text of the input box.\n  public readonly handleChange: React.ChangeEventHandler<HTMLInputElement> = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    this.setState({ value: e.target.value });\n  };\n  // this runs when the input is submitted. It checks whether the answer is right or wrong, and sets the game state according to that\n  public readonly handleSubmit: React.FormEventHandler<HTMLFormElement> = (\n    e: React.FormEvent<HTMLFormElement>\n  ) => {\n    e.preventDefault();\n    if (this.state.value.length <= 0)\n      return this.setState({ status: \"Value can't be empty!\" });\n    const name = this.state.currentSong.name.toLowerCase();\n    if (this.state.value.toLowerCase() !== name) {\n      if (this.state.secondTry)\n        return this.setState({\n          lost: true\n        });\n      this.setState({\n        value: \"\",\n        secondTry: true,\n        status: \"Incorrect! Try Again...\"\n      });\n      return;\n      \n    } else {\n      this.setState({\n        value: \"\",\n        status:\n          \"Correct! Next Try... \\n Your score is \" + (this.state.score + (this.state.secondTry ? 1 : 3)),\n        score: this.state.score + (this.state.secondTry ? 1 : 3),\n        secondTry: false, // reset the value back to false, whether or not it was true before\n        currentSong: this.getRandomSong()\n      });\n    }\n  };\n  // takes the song name and returns it's initials by splitting the name by its spaces and then mapping the array to the first letter of each item\n  private static generateSongInitials = ({ name }: song) => {\n    const words = name.split(/\\s/gi);\n    const initials = words.map((v: string) => v.charAt(0));\n    return initials.join(\" \").toUpperCase();\n  };\n\n  // the function that runs when the replace button is pressed; resets all the app state back to default\n  private readonly replay: MouseEventHandler<HTMLButtonElement> = (e: MouseEvent<HTMLButtonElement>) => {\n    this.setState({\n      value: \"\",\n      currentSong: this.getRandomSong(),\n      secondTry: false,\n      status: \"You are trying again\",\n      lost: false,\n      score: 0\n    })\n  }\n  // the function that returns the components to be rendered. If player has lost, it returns the LosingScreen component, else it returns the main components for the game.\n  render() {\n    return this.state.lost ? (\n      <LosingScreen score={this.state.score} replay={this.replay} />\n    ) : (\n      <Fragment>\n        <GameArea\n          description={App.generateSongInitials(this.state.currentSong)}\n        >\n          <Artist>{this.state.currentSong.artist}</Artist>\n        </GameArea>\n        <InputForm\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n          value={this.state.value}\n        />\n        <GameStatus status={this.state.status} />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// Create Base64 Object\r\n\r\nexport const encode = btoa\r\n","import {LoginAreaState} from '../ui/LoginArea/LoginArea'\r\nimport { users } from '../data/users.json'\r\nimport { encode } from './encryption'\r\n// checks whether the username and encoded password are equal to the ones given in the database\r\nexport const authenticate = (details: LoginAreaState): boolean => {\r\n    let authenticated = false;\r\n\r\n    for (const user of users) {\r\n        if (user.username === details.username && user.password === encode(details.password)) authenticated = true;\r\n    }    \r\n    return authenticated\r\n}","import styled from '@emotion/styled';\r\n\r\n\r\nexport const MarginedInput = styled('input')`\r\n    margin-left: 10px;\r\n    background-color: lightblue;\r\n    padding: 3px;\r\n    border: none;\r\n    &:focus {\r\n        background-color: cyan;\r\n        border: none;\r\n    }\r\n`\r\n\r\nexport const Submit = styled('button')`\r\n    border: none;\r\n    border-radius: 5px;\r\n    padding: 5px;\r\n    background-color: aliceblue;\r\n    color: black;\r\n`\r\n\r\nexport const LoginForm = styled('div')`\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n`","import React, {Component } from 'react';\r\nimport App from '../../App'\r\nimport { authenticate } from '../../util/authenticateUser'\r\nimport { UsernameContext } from '../../context/username'\r\nimport {MarginedInput, Submit, LoginForm} from './elements'\r\n\r\nexport interface LoginAreaProps {\r\n\r\n}\r\n\r\nexport interface LoginAreaState {\r\n    authenticated: boolean;\r\n    username: string;\r\n    password: string;\r\n    description: string;\r\n    outlined: boolean;\r\n}\r\n\r\nexport class LoginArea extends Component<LoginAreaProps, LoginAreaState> {\r\n    public state: LoginAreaState = {\r\n        authenticated: false,\r\n        username: '',\r\n        password: '',\r\n        description: '',\r\n        outlined: false\r\n    }\r\n    private readonly lengthLimit: number = 15;\r\n    constructor(props: LoginAreaProps) {\r\n        super(props)\r\n    }\r\n    public readonly handleSubmit: React.FormEventHandler<HTMLFormElement> = \r\n        (e: React.FormEvent<HTMLFormElement> ) => {\r\n            e.preventDefault();\r\n            if (this.state.username === '' || this.state.password === '') return this.setState({description: 'Username/Password cannot be empty.'})\r\n            if (!this.state.username.match(/^[0-9a-zA-Z]+$/)) return this.setState({\r\n                username: '',\r\n                description: 'Your username contains a strange character.'\r\n            })\r\n            if (!authenticate(this.state)) {\r\n                this.setState({\r\n                    username: '',\r\n                    password: '',\r\n                    description: 'Invalid login details! Try Again.'\r\n                })\r\n                return;\r\n            }\r\n            this.setState({authenticated: true})\r\n        }\r\n    public readonly handleUsernameOnChange: React.ChangeEventHandler<HTMLInputElement> = \r\n        (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            e.preventDefault()\r\n            this.setState({\r\n                username: e.target.value.slice(0, this.lengthLimit),\r\n                outlined: e.target.value.length >= this.lengthLimit\r\n            })\r\n        }\r\n    public readonly handlePasswordOnChange: React.ChangeEventHandler<HTMLInputElement> = \r\n        (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            e.preventDefault()\r\n            this.setState({\r\n                password: e.target.value\r\n            })\r\n        }\r\n    render() {\r\n        return this.state.authenticated ? <UsernameContext.Provider value={this.state.username}><App /></UsernameContext.Provider> : (<LoginForm>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div>\r\n                        <label>Username: \r\n                            <MarginedInput \r\n                                type={'text'} \r\n                                name={'username'} \r\n                                onChange={this.handleUsernameOnChange} \r\n                                value={this.state.username}\r\n                                style={{\r\n                                    border: this.state.outlined ? '5px solid red' : undefined\r\n                                }}\r\n                                placeholder={'enter your username'} />\r\n                        </label>\r\n                    </div>  \r\n                    <div>\r\n                        <label>Password: \r\n                            <MarginedInput \r\n                                type={'password'} \r\n                                name={'password'} \r\n                                onChange={this.handlePasswordOnChange}\r\n                                value={this.state.password}\r\n                                placeholder={'password'} />\r\n                        </label>\r\n                    </div>\r\n                    \r\n                    <div><Submit type={'submit'} >Login</Submit></div>\r\n                </form> \r\n                <p style={{color: 'red'}}>{this.state.description}</p>\r\n            </LoginForm>)\r\n    }\r\n}","// This  code is used to register a service worker.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Global, css } from '@emotion/core';\r\nimport React, {FunctionComponent} from 'react';\r\n\r\n// Global css styles for the entire application\r\n\r\nexport const BodyStyle: FunctionComponent = () => <Global styles={css`\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n            \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n            sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n\r\n    code {\r\n        font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\r\n            monospace;\r\n    }\r\n`} />;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\n// The css code to center everything on the webpage\r\n\r\nexport const StyledApp = styled('div')`\r\n    text-align: center;\r\n`;\r\n\r\nexport const StyledHeader = styled('header')`\r\n    background-color: #282c34;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: calc(10px + 2vmin);\r\n    color: white;\r\n`;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { LoginArea } from \"./ui/LoginArea/LoginArea\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {BodyStyle} from './styles/BodyStyle';\nimport {StyledApp, StyledHeader} from \"./styles/AppStyles\";\n\n// contains the login area within styled components. \nconst Main: React.FunctionComponent = () => (\n  <StyledApp>\n    <StyledHeader>\n      <LoginArea />\n      <BodyStyle />\n    </StyledHeader>\n  </StyledApp>\n);\n\n// renders everything to the screen\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}